#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.296
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Staad.Domain.Scheme
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Staad")]
	public partial class StaadDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InserttbWord(tbWord instance);
    partial void UpdatetbWord(tbWord instance);
    partial void DeletetbWord(tbWord instance);
    partial void InserttbWordlist(tbWordlist instance);
    partial void UpdatetbWordlist(tbWordlist instance);
    partial void DeletetbWordlist(tbWordlist instance);
    #endregion
		
		public StaadDbDataContext() : 
				base("Data Source=.;Initial Catalog=Staad;Persist Security Info=True;User ID=sa;Passwor" +
						"d=sa", mappingSource)
		{
			OnCreated();
		}
		
		public StaadDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StaadDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StaadDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StaadDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tbWord> tbWords
		{
			get
			{
				return this.GetTable<tbWord>();
			}
		}
		
		public System.Data.Linq.Table<tbWordlist> tbWordlists
		{
			get
			{
				return this.GetTable<tbWordlist>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbWord")]
	public partial class tbWord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _wordlistId;
		
		private string _original;
		
		private string _definition;
		
		private string _example;
		
		private EntityRef<tbWordlist> _tbWordlist;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnwordlistIdChanging(int value);
    partial void OnwordlistIdChanged();
    partial void OnoriginalChanging(string value);
    partial void OnoriginalChanged();
    partial void OndefinitionChanging(string value);
    partial void OndefinitionChanged();
    partial void OnexampleChanging(string value);
    partial void OnexampleChanged();
    #endregion
		
		public tbWord()
		{
			this._tbWordlist = default(EntityRef<tbWordlist>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wordlistId", DbType="Int NOT NULL")]
		public int wordlistId
		{
			get
			{
				return this._wordlistId;
			}
			set
			{
				if ((this._wordlistId != value))
				{
					if (this._tbWordlist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnwordlistIdChanging(value);
					this.SendPropertyChanging();
					this._wordlistId = value;
					this.SendPropertyChanged("wordlistId");
					this.OnwordlistIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_original", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string original
		{
			get
			{
				return this._original;
			}
			set
			{
				if ((this._original != value))
				{
					this.OnoriginalChanging(value);
					this.SendPropertyChanging();
					this._original = value;
					this.SendPropertyChanged("original");
					this.OnoriginalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_definition", DbType="NVarChar(700) NOT NULL", CanBeNull=false)]
		public string definition
		{
			get
			{
				return this._definition;
			}
			set
			{
				if ((this._definition != value))
				{
					this.OndefinitionChanging(value);
					this.SendPropertyChanging();
					this._definition = value;
					this.SendPropertyChanged("definition");
					this.OndefinitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_example", DbType="NVarChar(MAX)")]
		public string example
		{
			get
			{
				return this._example;
			}
			set
			{
				if ((this._example != value))
				{
					this.OnexampleChanging(value);
					this.SendPropertyChanging();
					this._example = value;
					this.SendPropertyChanged("example");
					this.OnexampleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbWordlist_tbWord", Storage="_tbWordlist", ThisKey="wordlistId", OtherKey="id", IsForeignKey=true)]
		public tbWordlist tbWordlist
		{
			get
			{
				return this._tbWordlist.Entity;
			}
			set
			{
				tbWordlist previousValue = this._tbWordlist.Entity;
				if (((previousValue != value) 
							|| (this._tbWordlist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbWordlist.Entity = null;
						previousValue.tbWords.Remove(this);
					}
					this._tbWordlist.Entity = value;
					if ((value != null))
					{
						value.tbWords.Add(this);
						this._wordlistId = value.id;
					}
					else
					{
						this._wordlistId = default(int);
					}
					this.SendPropertyChanged("tbWordlist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbWordlist")]
	public partial class tbWordlist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.DateTime _created;
		
		private EntitySet<tbWord> _tbWords;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    #endregion
		
		public tbWordlist()
		{
			this._tbWords = new EntitySet<tbWord>(new Action<tbWord>(this.attach_tbWords), new Action<tbWord>(this.detach_tbWords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbWordlist_tbWord", Storage="_tbWords", ThisKey="id", OtherKey="wordlistId")]
		public EntitySet<tbWord> tbWords
		{
			get
			{
				return this._tbWords;
			}
			set
			{
				this._tbWords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbWords(tbWord entity)
		{
			this.SendPropertyChanging();
			entity.tbWordlist = this;
		}
		
		private void detach_tbWords(tbWord entity)
		{
			this.SendPropertyChanging();
			entity.tbWordlist = null;
		}
	}
}
#pragma warning restore 1591
